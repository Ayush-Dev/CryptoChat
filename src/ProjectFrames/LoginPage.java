/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjectFrames;

import ProjectDAO.UserDAO;
import ProjectPojo.UserPojo;
import ProjectSecurity.KeyExchange;
import ProjectSecurity.Security;
import static ProjectSecurity.Security.HashPassword;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.font.TextAttribute;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author AyushDev
 */
public class LoginPage extends javax.swing.JFrame {
    private static final int ONLINE = 1;
    /**
     * Creates new form login
     */
    public LoginPage() {
        initComponents();
        try {
            Class.forName("ProjectDatabase.DatabaseConnection");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        jLabelForgotPassword.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        super.setLocationRelativeTo(null);
        jLabelForgotPassword.setVisible(false);
//        kGradientPanel1.setPreferredSize(new java.awt.Dimension(1080, 800));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kGradientPanel1 = new keeptoo.KGradientPanel();
        jTextFieldUsername = new javax.swing.JTextField();
        jPasswordFieldPassword = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        kButtonLogin = new keeptoo.KButton();
        kButton2 = new keeptoo.KButton();
        jLabel3 = new javax.swing.JLabel();
        jLabelForgotPassword = new javax.swing.JLabel();
        jLabelLogo = new javax.swing.JLabel();
        jLabelExitButton = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        kGradientPanel1.setkBorderRadius(5);
        kGradientPanel1.setkEndColor(new java.awt.Color(0, 255, 255));
        kGradientPanel1.setkGradientFocus(1500);
        kGradientPanel1.setkStartColor(new java.awt.Color(96, 96, 96));
        kGradientPanel1.setkTransparentControls(false);
        kGradientPanel1.setMinimumSize(new java.awt.Dimension(0, 0));
        kGradientPanel1.setOpaque(false);
        kGradientPanel1.setPreferredSize(new java.awt.Dimension(1080, 700));
        kGradientPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextFieldUsername.setBackground(new java.awt.Color(0, 0, 0, 1));
        jTextFieldUsername.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jTextFieldUsername.setForeground(new java.awt.Color(255, 255, 255));
        jTextFieldUsername.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        jTextFieldUsername.setCaretColor(new java.awt.Color(204, 0, 204));
        jTextFieldUsername.setOpaque(false);
        jTextFieldUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldUsernameFocusGained(evt);
            }
        });
        kGradientPanel1.add(jTextFieldUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 220, 420, 40));

        jPasswordFieldPassword.setBackground(new java.awt.Color(0, 0, 0, 1));
        jPasswordFieldPassword.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jPasswordFieldPassword.setForeground(new java.awt.Color(255, 255, 255));
        jPasswordFieldPassword.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(255, 255, 255)));
        jPasswordFieldPassword.setOpaque(false);
        jPasswordFieldPassword.setEchoChar('\u25CF');
        jPasswordFieldPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPasswordFieldPasswordFocusGained(evt);
            }
        });
        jPasswordFieldPassword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPasswordFieldPasswordKeyPressed(evt);
            }
        });
        kGradientPanel1.add(jPasswordFieldPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 340, 420, 40));

        jLabel1.setFont(new java.awt.Font("Segoe UI Emoji", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Password");
        kGradientPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 310, 220, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI Emoji", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Or");
        kGradientPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 460, 30, -1));

        kButtonLogin.setText("Sign In");
        kButtonLogin.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        kButtonLogin.setkBorderRadius(50);
        kButtonLogin.setkEndColor(new java.awt.Color(0, 204, 204));
        kButtonLogin.setkHoverEndColor(new java.awt.Color(0, 153, 153));
        kButtonLogin.setkHoverForeGround(new java.awt.Color(255, 204, 255));
        kButtonLogin.setkHoverStartColor(new java.awt.Color(0, 102, 102));
        kButtonLogin.setkStartColor(new java.awt.Color(0, 51, 153));
        kButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kButtonLoginActionPerformed(evt);
            }
        });
        kGradientPanel1.add(kButtonLogin, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 450, 170, -1));

        kButton2.setText("Sign Up");
        kButton2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        kButton2.setkBorderRadius(50);
        kButton2.setkEndColor(new java.awt.Color(0, 204, 204));
        kButton2.setkHoverEndColor(new java.awt.Color(0, 153, 153));
        kButton2.setkHoverForeGround(new java.awt.Color(255, 204, 255));
        kButton2.setkHoverStartColor(new java.awt.Color(0, 102, 102));
        kButton2.setkStartColor(new java.awt.Color(0, 51, 153));
        kButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kButton2ActionPerformed(evt);
            }
        });
        kGradientPanel1.add(kButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 450, 170, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI Emoji", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Username");
        kGradientPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 180, 210, -1));

        jLabelForgotPassword.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelForgotPassword.setForeground(new java.awt.Color(255, 255, 255));
        jLabelForgotPassword.setText("Forgot Password ?");
        jLabelForgotPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLabelForgotPasswordFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jLabelForgotPasswordFocusLost(evt);
            }
        });
        jLabelForgotPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelForgotPasswordMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelForgotPasswordMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelForgotPasswordMouseExited(evt);
            }
        });
        kGradientPanel1.add(jLabelForgotPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 400, 210, -1));

        jLabelLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ProjectGraphics/Logo_Small.png"))); // NOI18N
        kGradientPanel1.add(jLabelLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 540, 220));

        jLabelExitButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelExitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ProjectGraphics/exitIcon.png"))); // NOI18N
        jLabelExitButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(255, 0, 0)));
        jLabelExitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelExitButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelExitButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabelExitButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabelExitButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabelExitButtonMouseReleased(evt);
            }
        });
        kGradientPanel1.add(jLabelExitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1041, 0, 40, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(kGradientPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1080, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void kButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kButtonLoginActionPerformed
        if(jTextFieldUsername.getText().trim().isEmpty()){
            jTextFieldUsername.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, Color.RED));
            return;
        }
        if(jPasswordFieldPassword.getText().isEmpty()){
            jPasswordFieldPassword.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, Color.RED));
            return;
        }
        if (jTextFieldUsername.getText().trim().isEmpty() || Arrays.toString(jPasswordFieldPassword.getPassword()).isEmpty()) {
            jTextFieldUsername.requestFocus();
            return;
        }
        try {
            String privateKey = getPrivateKey();
            if (privateKey == null) {
                return;
            }
            UserPojo login = new UserPojo(jTextFieldUsername.getText().trim(), HashPassword(jTextFieldUsername.getText().trim() + Arrays.toString(jPasswordFieldPassword.getPassword())), privateKey, KeyExchange.generatePublicKey(KeyExchange.generatePublicPackets(KeyExchange.generatePrivatePackets(privateKey))), ONLINE);
            if (!UserDAO.isUserValid(login)) {
                jLabelForgotPassword.setVisible(true);
                JOptionPane.showMessageDialog(null, "Username or Password is Incorrect", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (UserDAO.getUserStatus(login) == ONLINE) {
                JOptionPane.showMessageDialog(null, "Another account is already online", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            UserPojo.setUserName(jTextFieldUsername.getText().trim());
            UserDAO.updateUserStatus(login);
//            ClientPojo.startSocket();
//            new MessengerHome().setVisible(true);
            new ChatApplication().setVisible(true);
            this.dispose();

        } catch (IOException | NoSuchAlgorithmException | SQLException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_kButtonLoginActionPerformed

    private void jTextFieldUsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUsernameFocusGained
        jTextFieldUsername.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE));
    }//GEN-LAST:event_jTextFieldUsernameFocusGained

    private void jPasswordFieldPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPasswordFieldPasswordFocusGained
        jPasswordFieldPassword.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, Color.WHITE));
    }//GEN-LAST:event_jPasswordFieldPasswordFocusGained

    private void jPasswordFieldPasswordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordFieldPasswordKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(jTextFieldUsername.getText().trim().isEmpty()){
                jTextFieldUsername.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, Color.RED));
                return;
            }
            if(jPasswordFieldPassword.getText().isEmpty()){
                jPasswordFieldPassword.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, Color.RED));
                return;
            }
            if (jTextFieldUsername.getText().trim().isEmpty() || Arrays.toString(jPasswordFieldPassword.getPassword()).isEmpty()) {
                jTextFieldUsername.requestFocus();
                return;
            }
            try {
                String privateKey = getPrivateKey();
                if (privateKey == null) {
                    return;
                }
                UserPojo login = new UserPojo(jTextFieldUsername.getText().trim(), HashPassword(jTextFieldUsername.getText().trim() + Arrays.toString(jPasswordFieldPassword.getPassword())), privateKey, KeyExchange.generatePublicKey(KeyExchange.generatePublicPackets(KeyExchange.generatePrivatePackets(privateKey))), ONLINE);
                if (!UserDAO.isUserValid(login)) {
                    jLabelForgotPassword.setVisible(true);
                    JOptionPane.showMessageDialog(null, "Username or Password is Incorrect", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (UserDAO.getUserStatus(login) == ONLINE) {
                    JOptionPane.showMessageDialog(null, "Another account is already online", "ERROR", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                UserPojo.setUserName(jTextFieldUsername.getText().trim());
                UserDAO.updateUserStatus(login);
//                ClientPojo.startSocket();
//                new MessengerHome().setVisible(true);
                new ChatApplication().setVisible(true);
                this.dispose();

            } catch (IOException | NoSuchAlgorithmException | SQLException ex) {
                Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jPasswordFieldPasswordKeyPressed

    private void jLabelForgotPasswordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLabelForgotPasswordFocusGained
        Font font = jLabelForgotPassword.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        jLabelForgotPassword.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabelForgotPasswordFocusGained

    private void jLabelForgotPasswordFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLabelForgotPasswordFocusLost
        Font font = jLabelForgotPassword.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, -1);
        jLabelForgotPassword.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabelForgotPasswordFocusLost

    private void jLabelForgotPasswordMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelForgotPasswordMouseEntered
        Font font = jLabelForgotPassword.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        jLabelForgotPassword.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabelForgotPasswordMouseEntered

    private void jLabelForgotPasswordMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelForgotPasswordMouseExited
        Font font = jLabelForgotPassword.getFont();
        Map attributes = font.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, -1);
        jLabelForgotPassword.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabelForgotPasswordMouseExited

    private void jLabelForgotPasswordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelForgotPasswordMouseClicked
        String username = JOptionPane.showInputDialog(null, "Please Enter Your Username", "FORGOT PASSWORD", JOptionPane.INFORMATION_MESSAGE);
        if(username.equals("")){
            JOptionPane.showMessageDialog(null, "Enter Username Value !", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String privateKey = JOptionPane.showInputDialog(null, "Please Enter Your Private Key", "FORGOT PASSWORD", JOptionPane.INFORMATION_MESSAGE);
        if(privateKey.equals("")){
            JOptionPane.showMessageDialog(null, "Enter Key Value !", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        UserPojo user = new UserPojo(username);
        try {
            if(UserDAO.isUsernameAvailable(user)){
                JOptionPane.showMessageDialog(null, "Incorrect Username or Key !", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (SQLException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        String publicKey = KeyExchange.generatePublicKey(KeyExchange.generatePublicPackets(KeyExchange.generatePrivatePackets(privateKey)));
        user = new UserPojo(username, publicKey);
        try {
            String originalPublicKey = UserDAO.getPublicKey(user);
            if(!originalPublicKey.equals(publicKey)){
                JOptionPane.showMessageDialog(null, "Incorrect Username or Key !", "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (SQLException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        String newPassword = JOptionPane.showInputDialog(null, "Enter New Password.", "TIP", JOptionPane.INFORMATION_MESSAGE);
        String confirmPassword = JOptionPane.showInputDialog(null, "Confirm Password.", "TIP", JOptionPane.INFORMATION_MESSAGE);
        if(newPassword.equals(confirmPassword)){
            JOptionPane.showMessageDialog(null, "Passwords didn't match !", "ERROR", JOptionPane.ERROR_MESSAGE);
            return;
        }
        user = new UserPojo(username, newPassword, ONLINE);
        try{
            newPassword = username + Security.HashPassword(newPassword);
            if(UserDAO.updateUserPassword(user)){
                JOptionPane.showMessageDialog(null, "Password Updated Successfully !!", "TIP", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException | NoSuchAlgorithmException ex) {
            Logger.getLogger(LoginPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabelForgotPasswordMouseClicked

    private void kButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kButton2ActionPerformed
        new RegistrationPage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_kButton2ActionPerformed

    private void jLabelExitButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelExitButtonMouseEntered
        jLabelExitButton.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, Color.RED));
    }//GEN-LAST:event_jLabelExitButtonMouseEntered

    private void jLabelExitButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelExitButtonMouseExited
        jLabelExitButton.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, Color.RED));
    }//GEN-LAST:event_jLabelExitButtonMouseExited

    private void jLabelExitButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelExitButtonMousePressed
        jLabelExitButton.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, Color.BLACK));
    }//GEN-LAST:event_jLabelExitButtonMousePressed

    private void jLabelExitButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelExitButtonMouseReleased
        jLabelExitButton.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, Color.RED));
    }//GEN-LAST:event_jLabelExitButtonMouseReleased

    private void jLabelExitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelExitButtonMouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabelExitButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new LoginPage().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelExitButton;
    private javax.swing.JLabel jLabelForgotPassword;
    private javax.swing.JLabel jLabelLogo;
    private javax.swing.JPasswordField jPasswordFieldPassword;
    private javax.swing.JTextField jTextFieldUsername;
    private keeptoo.KButton kButton2;
    private keeptoo.KButton kButtonLogin;
    private keeptoo.KGradientPanel kGradientPanel1;
    // End of variables declaration//GEN-END:variables
    private String getPrivateKey() throws IOException {
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        j.setFileSelectionMode(JFileChooser.FILES_ONLY);
        j.setAcceptAllFileFilterUsed(false);
        j.setDialogTitle("Open file");
        j.setMultiSelectionEnabled(false);
        j.setSelectedFile(new File(FileSystemView.getFileSystemView().getHomeDirectory(), jTextFieldUsername.getText().trim() + ".txt"));
        int r = j.showOpenDialog(null);
        String path = null;
        if (r == JFileChooser.APPROVE_OPTION) {
            File f = j.getSelectedFile();
            path = f.getAbsolutePath();
        } else {
            return null;
        }
        String privateKey = null;
        try (BufferedReader br = new BufferedReader(new FileReader(path))) {
            privateKey = br.readLine();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "File Not Found");
            privateKey = getPrivateKey();
        }
        return privateKey;
    }
}
